#!/usr/bin/env python

Import("env")
Import("env_modules")

env_theora = env_modules.Clone()

# Thirdparty source files

thirdparty_obj = []

if env["builtin_libtheora"]:
    thirdparty_dir = "#thirdparty/libtheora/"
    thirdparty_sources = [
        # "analyze.c",
        # "apiwrapper.c",
        "bitpack.c",
        # "collect.c",
        # "decapiwrapper.c",
        "decinfo.c",
        "decode.c",
        "dequant.c",
        # "encapiwrapper.c",
        # "encfrag.c",
        # "encinfo.c",
        # "encode.c",
        # "encoder_disabled.c",
        # "enquant.c",
        # "fdct.c",
        "fragment.c",
        "huffdec.c",
        # "huffenc.c",
        "idct.c",
        "info.c",
        "internal.c",
        # "mathops.c",
        # "mcenc.c",
        "quant.c",
        # "rate.c",
        "state.c",
        # "tokenize.c",
    ]

    thirdparty_sources_arm = [
        "arm/armcpu.c",
        # "arm/armenc.c",
        "arm/armstate.c",
    ]

    thirdparty_sources_arm_asm = [
        "arm/armbits.s",
        # "arm/armencfrag.s",
        # "arm/armenquant.s",
        "arm/armfrag.s",
        "arm/armidct.s",
        "arm/armloop.s",
        "arm/armopts.s",
    ]

    thirdparty_sources_arm_gnu = [
        "arm/armbits-gnu.S",
        # "arm/armencfrag-gnu.S",
        # "arm/armenquant-gnu.S",
        "arm/armfrag-gnu.S",
        "arm/armidct-gnu.S",
        "arm/armloop-gnu.S",
    ]

    thirdparty_sources_x86 = [
        # "x86/mmxencfrag.c",
        # "x86/mmxfdct.c",
        "x86/mmxfrag.c",
        "x86/mmxidct.c",
        "x86/mmxstate.c",
        # "x86/sse2encfrag.c",
        # "x86/sse2fdct.c",
        "x86/sse2idct.c",
        "x86/x86cpu.c",
        # "x86/x86enc.c",
        # "x86/x86enquant.c"
        "x86/x86state.c",
    ]

    thirdparty_sources_x86_vc = [
        # "x86_vc/mmxencfrag.c",
        # "x86_vc/mmxfdct.c",
        "x86_vc/mmxfrag.c",
        "x86_vc/mmxidct.c",
        "x86_vc/mmxstate.c",
        "x86_vc/x86cpu.c",
        # "x86_vc/x86enc.c",
        "x86_vc/x86state.c",
    ]

    if env["x86_libtheora_opt_gcc"]:
        thirdparty_sources += thirdparty_sources_x86

    if env["x86_libtheora_opt_vc"]:
        thirdparty_sources += thirdparty_sources_x86_vc

    if env["x86_libtheora_opt_gcc"] or env["x86_libtheora_opt_vc"]:
        env_theora.Append(CPPDEFINES=["OC_X86_ASM"])

    import os

    use_neon = "neon_enabled" in env and env["neon_enabled"] and os.name != "nt"
    from shutil import which

    if not which("perl"):
        print("Perl not found. It's required to build Theora with arm optimizations.")
        use_neon = False

    if use_neon:
        env_theora.Append(CPPDEFINES=["OC_ARM_ASM", "OC_ARM_ASM_NEON"])
        env_theora.Append(
            ASFLAGS=[
                "-no-integrated-as",
                # Add the arm folder, or else .S files won't be able to find armopts-gnu.S
                "-I" + thirdparty_dir[1:] + "arm",
            ]
        )

    thirdparty_sources = [thirdparty_dir + file for file in thirdparty_sources]

    env_theora.Prepend(CPPPATH=[thirdparty_dir])

    # also requires libogg and libvorbis
    if env["builtin_libogg"]:
        env_theora.Prepend(CPPPATH=["#thirdparty/libogg"])
    if env["builtin_libvorbis"]:
        env_theora.Prepend(CPPPATH=["#thirdparty/libvorbis"])

    env_thirdparty = env_theora.Clone()
    env_thirdparty.disable_warnings()
    env_thirdparty.add_source_files(thirdparty_obj, thirdparty_sources)

    if use_neon:
        env_neon = env_thirdparty.Clone()
        if "S_compiler" in env:
            env_neon["CC"] = env["S_compiler"]
        neon_sources = []
        for source in thirdparty_sources_arm_asm:
            asm_source = thirdparty_dir + source
            env_neon.CommandNoCache(
                asm_source.rsplit(".", 1)[0] + "-gnu.S",
                asm_source,
                "perl " + thirdparty_dir[1:] + "arm/arm2gnu.pl < $SOURCES > $TARGETS",
            )

        for source in thirdparty_sources_arm + thirdparty_sources_arm_gnu:
            env_neon.Depends(thirdparty_dir + source, thirdparty_dir + "arm/armopts-gnu.S")
            neon_sources.append(env_neon.Object(thirdparty_dir + source)),

        thirdparty_obj += neon_sources

    env.modules_sources += thirdparty_obj


# Godot source files

module_obj = []

env_theora.add_source_files(module_obj, "*.cpp")
env.modules_sources += module_obj

# Needed to force rebuilding the module files when the thirdparty library is updated.
env.Depends(module_obj, thirdparty_obj)
